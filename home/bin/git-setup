#!/usr/bin/env bash

echo This will configure git for you

NAME_DEFAULT="Patrick Watson"
EMAIL_DEFAULT="watson81@users.noreply.github.com"
SIGN_KEY_ID="B290740224CB30A8EE2E37A4DE53CC1DE39D5A03"
SIGN_DEFAULT="true"
EDITOR_DEFAULT="$(which code 2>/dev/null)"
if [ -n "${EDITOR_DEFAULT}" ]; then
    EDITOR_DEFAULT="${EDITOR_DEFAULT} --wait"
else
    EDITOR_DEFAULT="$(which nano 2>/dev/null)"
fi

CYAN='\033[0;36m'
BLUE='\033[1;34m'
RED='\033[0;31m'
LRED='\033[1;31m'
NC='\033[0m' # No Color

read -rp "Configure [L]ocal or [G]lobal? [L] " SCOPE
[ -n "${SCOPE}"  ] || SCOPE="L"
# get only the first character, as upper case
SCOPE=$(echo ${SCOPE:0:1} | tr '[:lower:]' '[:upper:]')
if [ "${SCOPE}" = "G" ] ; then
    printf "%bConfiguring globally%b\n" "${BLUE}" "${NC}"
    GIT_CFG_CMD="git config --global"
else
    printf "%bConfiguring locally%b\n" "${BLUE}" "${NC}"
    GIT_CFG_CMD="git config --local"
fi

function confirmValue {
    # $1 prompt
    # $2 value
    # returns entered text in $REPLY. If blank, return code is non-zero
    read -rep "${1} " -i "${2}"
    [ -n "${REPLY}" ]
}

function setGitConfig {
    # $1 git config key
    # $2 prompt
    # $3 default value

    local VALUE

    if VALUE=$(git config --global --get "$1") ; then
        printf "%bGLOBAL%b=%b%s%b\n" "${RED}" "${NC}" "${CYAN}" "${VALUE}" "${NC}"
    fi
    if VALUE=$(git config --local --get "$1") ; then
        printf "%bLOCAL%b=%b%s%b\n" "${LRED}" "${NC}" "${CYAN}" "${VALUE}" "${NC}"
    fi

    if ! VALUE=$($GIT_CFG_CMD --get "$1") ; then
        VALUE=$3
    fi
    if confirmValue "$2" "${VALUE}" ; then
        ${GIT_CFG_CMD} "$1" "${REPLY}"
    else
        ${GIT_CFG_CMD} --unset "$1"
    fi
}

printf "%bEnter an empty string to unset the config variable.%b\n" "${BLUE}" "${NC}"
setGitConfig "user.name"        "Name:"                 "${NAME_DEFAULT}"
setGitConfig "user.email"       "Email:"                "${EMAIL_DEFAULT}"
setGitConfig "commit.gpgSign"   "Sign all commits?"     "${SIGN_DEFAULT}"
setGitConfig "user.signingKey"  "Signing GPG KeyID:"    "${SIGN_KEY_ID}"

if [ "${SCOPE}" = "G" ] ; then
    ${GIT_CFG_CMD} log.showSignature true
    ${GIT_CFG_CMD} pull.ff only
    ${GIT_CFG_CMD} alias.co checkout
    setGitConfig "core.editor"  "Editor:"               "${EDITOR_DEFAULT}"
fi
